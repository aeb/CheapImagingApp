#:import Factory kivy.factory.Factory
#:import RiseInTransition kivy.uix.screenmanager.RiseInTransition
#:import images_path kivymd.images_path
#:import Clock kivy.clock.Clock

ScreenManager:
    id: sm
    transition: Factory.SlideTransition()

    Screen:
        name: "home"

        MovieSplashScreen:
            id: home_screen
            
        CircularRippleButton:
            source: "./images/ngeht_medallion2.png"
            size_hint: 0.4,None
            height: self.width
            pos_hint: {"center": (0.5,0.3)}            
            allow_stretch: True
            ripple_duration_in_fast: 0.1
            on_release:
                print("--> From home to targets")
                self.delayed_switch_to_imaging(delay=0.2)
                print("<-- From home to targets")


    Screen:
        name: 'targets'

        LogoBackground:
            logo_size: 0.5*max(root.height,root.width)
            logo_offset: (0.5*root.width,0.5*root.height)
            size: root.size
        
        TargetSelectionScreen:
            id: selection_screen

        AnchorLayout:
            anchor_x: "left"
            ActionButton:
                size_hint: None, None
                size: '16dp', '80dp'
                text: '<'
                icon: "./images/left_chevron.png"
                color: 1,1,1,0.5
                background_color: 1,1,1,0.25
                on_release:
                    print("--> From target to map")
                    selection_screen.dssp_id.produce_selected_data_set()
                    sm.transition.direction = 'right'
                    sm.current = 'screen3'
                    maps_screen.ddm_id.refresh()
                    maps_screen.otm_id.refresh()
                    maps_screen.menu_id.refresh()
                    maps_screen.plot_id.replot()
                    print("<-- From target to map")
                    
            
        AnchorLayout:
            anchor_x: "right"
            ActionButton:
                size_hint: None, None
                size: '16dp', '80dp'
                text: '>'
                icon: "./images/right_chevron.png"
                color: 1,1,1,0.5
                background_color: 1,1,1,0.25
                on_release:
                    print("--> From target to data")
                    sm.transition.direction = 'left'
                    sm.current = 'screen0'
                    print("<-- From target to data")
                    
                    
    Screen:
        name: 'screen0'

        LogoBackground:
            logo_size: 0.5*max(root.height,root.width)
            logo_offset: (0.75*self.logo_size+0.25*root.width,0.45*root.height)
            size: root.size

        
        DataSetSelectionScreen:
            id: selection_screen

        AnchorLayout:
            anchor_x: "left"
            ActionButton:
                size_hint: None, None
                size: '16dp', '80dp'
                text: '<'
                icon: "./images/left_chevron.png"
                color: 1,1,1,0.5
                background_color: 1,1,1,0.25
                on_release:
                    # print("--> From data to map")
                    # selection_screen.dssp_id.produce_selected_data_set()
                    # sm.transition.direction = 'right'
                    # sm.current = 'screen3'
                    # maps_screen.ddm_id.refresh()
                    # maps_screen.otm_id.refresh()
                    # maps_screen.menu_id.refresh()
                    # maps_screen.plot_id.replot()
                    # print("<-- From data to map")
                    print("--> From data to target")
                    # selection_screen.dssp_id.produce_selected_data_set()
                    if selection_screen.dssp_id.selection_check() : sm.transition.direction = 'right'; sm.current = 'targets';
                    print("<-- From data to target")
                    
            
        AnchorLayout:
            anchor_x: "right"
            ActionButton:
                size_hint: None, None
                size: '16dp', '80dp'
                text: '>'
                icon: "./images/right_chevron.png"
                color: 1,1,1,0.5
                background_color: 1,1,1,0.25
                on_release:
                    print("--> From data to reconstruction")
                    if selection_screen.dssp_id.selection_check() : selection_screen.dssp_id.produce_selected_data_set(); sm.transition.direction = 'left'; sm.current = 'screen1'; reconstruction_screen.ddm_id.refresh(); reconstruction_screen.otm_id.refresh(); reconstruction_screen.menu_id.refresh(); reconstruction_screen.plot_id.replot()
                    print("<-- From data to reconstruction")
                    

    Screen:
        name: 'screen1'
        
        ReconstructionScreen:
            id: reconstruction_screen
            

        AnchorLayout:
            anchor_x: "left"
            ActionButton:
                size_hint: None, None
                size: '16dp', '80dp'
                text: '<'
                icon: "./images/left_chevron.png"
                color: 1,1,1,0.5
                background_color: 1,1,1,0.25
                on_release:
                    print("--> From reconstruction to data")
                    sm.transition.direction = 'right'
                    sm.current = 'screen0'
                    print("<-- From reconstruction to data")

        AnchorLayout:
            anchor_x: "right"
            ActionButton:
                size_hint: None, None
                size: '16dp', '80dp'
                text: '>'
                icon: "./images/right_chevron.png"
                color: 1,1,1,0.5
                background_color: 1,1,1,0.25
                on_release:
                    print("--> From reconstruction to baselines")
                    sm.transition.direction = 'left'
                    sm.current = 'screen2'
                    baselines_screen.ddm_id.refresh()
                    baselines_screen.otm_id.refresh()
                    baselines_screen.menu_id.refresh()
                    baselines_screen.plot_id.replot()
                    print("<-- From reconstruction to baselines")
                    
                    
    Screen:
        name: 'screen2'

        BaselinesScreen:
            id: baselines_screen

        AnchorLayout:
            anchor_x: "left"
            ActionButton:
                size_hint: None, None
                size: '16dp', '80dp'
                text: '<'
                icon: "./images/left_chevron.png"
                color: 1,1,1,0.5
                background_color: 1,1,1,0.25
                on_release:
                    print("--> From baselines to reconstruction")
                    sm.transition.direction = 'right'
                    sm.current = 'screen1'
                    reconstruction_screen.ddm_id.refresh()
                    reconstruction_screen.otm_id.refresh()
                    reconstruction_screen.menu_id.refresh()
                    reconstruction_screen.plot_id.replot()
                    print("<-- From baselines to reconstruction")

        AnchorLayout:
            anchor_x: "right"
            ActionButton:
                size_hint: None, None
                size: '16dp', '80dp'
                text: '>'
                icon: "./images/right_chevron.png"
                color: 1,1,1,0.5
                background_color: 1,1,1,0.25
                on_release:
                    print("--> From baselines to map")
                    sm.transition.direction = 'left'
                    sm.current = 'screen3'
                    maps_screen.ddm_id.refresh()
                    maps_screen.otm_id.refresh()                    
                    maps_screen.menu_id.refresh()
                    maps_screen.plot_id.replot()
                    print("<-- From baselines to map")
                    

    Screen:
        name: 'screen3'


        LogoBackground:
            logo_size: 0.5*max(root.height,root.width)
            logo_offset: (0.1*self.logo_size,0.4*self.logo_size)
            size: root.size
        
        MapsScreen:
            id: maps_screen

        AnchorLayout:
            anchor_x: "left"
            ActionButton:
                size_hint: None, None
                size: '16dp', '80dp'
                text: '<'
                icon: "./images/left_chevron.png"
                color: 1,1,1,0.5
                background_color: 1,1,1,0.25
                on_release:
                    print("--> From map to baselines")
                    selection_screen.dssp_id.produce_selected_data_set()
                    sm.transition.direction = 'right'
                    sm.current = 'screen2'
                    baselines_screen.ddm_id.refresh()
                    baselines_screen.otm_id.refresh()
                    baselines_screen.menu_id.refresh()
                    baselines_screen.plot_id.replot()
                    print("<-- From map to baselines")


        AnchorLayout:
            anchor_x: "right"
            ActionButton:
                size_hint: None, None
                size: '16dp', '80dp'
                text: '>'
                icon: "./images/right_chevron.png"
                color: 1,1,1,0.5
                background_color: 1,1,1,0.25
                on_release:
                    # print("--> From map to data")
                    # sm.transition.direction = 'left'
                    # sm.current = 'screen0'
                    # print("<-- From map to data")

                    print("--> From map to target")
                    sm.transition.direction = 'left'
                    sm.current = 'targets'
                    print("<-- From map to target")
                    
    Screen:
        name: 'news'

        NewsScreen:
            id: news_screen

    Screen:
        name: 'about'

        AboutScreen:
            id: about_screen


                    
<MovieSplashScreen>:
    id: mss
    orientation: "vertical"
    TopBanner:
    MDBoxLayout:
        RelativeLayout:
            canvas:
                Color:
                    rgba: 0,0,0,1
                Rectangle:
                    size: self.width,self.height

            # Video:
            #     source: "./movies/ngEHT.mp4"
            #     state: "play"
            #     volume: 0
            #     size_hint: 1,1
            #     pos_hint: {"center": (0.5,0.5)}
            Image:
                id: bkgnd
                source: "./images/ngEHT_screen_cap3.png"
                allow_stretch: True
                size_hint: 1,1
                pos_hint: {"center": (0.5,0.5)}


<InteractiveTargetMap@FloatLayout>:
    orientation: "vertical"
    FloatLayout :
        size_hint: 1.0,1.0
        TargetSelectionMap :
            id: plot
            size: root.width,root.height
    BoxLayout:
        orientation: "vertical"
        size_hint: None,None
        size: dp(50),dp(100)
        pos: root.width-dp(50),root.height-dp(100)
        Button:
            text: "\u002B"
            font_size: "36sp"
            size_hint: None,None
            size: "50dp","50dp"
            color: 1,1,1,0.75
            background_color: 0,0,0,0.25
            on_press: plot.zoom_in()
        Button:
            text: "\u2212"
            font_size: "36sp"
            size_hint: None,None
            size: "50dp","50dp"
            color: 1,1,1,0.75
            background_color: 0,0,0,0.25
            on_press: plot.zoom_out()

<TargetSelectionScreen>:
    orientation: "vertical"
    TopBanner:
    InteractiveTargetMap:


        
# <TargetSelectionScreen>:
#     orientation: "vertical"
#     TopBanner:
#     RelativeLayout:
#         SimpleTargetSelection:
#             id: ts
#             size_hint_x: 0.75
#             size_hint_y: None
#             pos_hint: {'center': (.5, .7)}
#             height: "30dp"
#             sync_height: True
#             text_autoupdate: True
#             color: 1,1,1,1
#             background_color: 0.14,0.14,0.14,0.25
#         Label:
#             size_hint_x: 0.75
#             size_hint_y: None
#             pos_hint: {'center': (0.5,0.5)}
#             height: "30dp"
#             color: 1,1,1,1
#             text: "RA: "+ts.RA_label
#         Label:
#             size_hint_x: 0.75
#             size_hint_y: None
#             pos_hint: {'center': (0.5,0.4)}
#             height: "30dp"
#             color: 1,1,1,1
#             text: "Dec: "+ts.Dec_label
                
<DataSetSelectionScreen>:
    dssp_id: dssp
    orientation: "vertical"
    TopBanner:
    BoxLayout:
        size_hint: 1,0.05    
    DataSetSelectionPage:
        id: dssp
    # Label:
    #     text: dssp.path_info    
    # RelativeLayout:
    #     canvas.before:
    #         Color:
    #             #rgba: 1,1,1,1
    #             rgba: 0.77,0.55,0.17,1
    #         Rectangle:
    #             size: self.width,self.height
    #     Label:
    #         size_hint_y: None
    #         pos_hint: {'center': (.5, .8)}
    #         text: "Select Data Set"
    #         color: 0.14,0.14,0.14,1
    #         font_size: "24sp"
    #     SimpleDataSetSelection:
    #         size_hint_x: 0.75
    #         size_hint_y: None
    #         pos_hint: {'center': (.5, .7)}
    #         height: "30dp"
    #         sync_height: True
    #         text_autoupdate: True
    #         color: 1,1,1,1
    #         background_color: 0.14,0.14,0.14,0.25
    #         on_text:
    #             self.select_dataset()
    #     Image:
    #         source: "./images/ngeht_white_on_gold2.png"
    #         allow_stretch: True
    #         size_hint: 1,0.5
    #         pos_hint: {'top': 0.6 }
        
<ReconstructionScreen>:
    orientation: "vertical"
    ddm_id: irplot.ddm_id
    otm_id: irplot.otm_id
    menu_id: irplot.menu_id
    plot_id: irplot.plot_id
    TopBanner:
    RelativeLayout:
        InteractiveReconstructionPlot:
            id: irplot
                
<BaselinesScreen>:
    orientation: "vertical"
    ddm_id: ibplot.ddm_id
    otm_id: ibplot.otm_id
    menu_id: ibplot.menu_id
    plot_id: ibplot.plot_id
    TopBanner:
    RelativeLayout:
        InteractiveBaselinesPlot:
            id: ibplot

<MapsScreen>:
    orientation: "vertical"
    ddm_id: implot.ddm_id
    otm_id: implot.otm_id
    menu_id: implot.menu_id
    plot_id: implot.plot_id
    TopBanner:
    RelativeLayout:
        InteractiveMapsPlot:
            id: implot

<TopBanner>:
    orientation: "vertical"
    size_hint: 1, None

    MDToolbar:
        title: "ngEHT @home"
        size_hint: 1,1
        md_bg_color: 0.14,0.14,0.14,1
        specific_text_color: 0.77,0.55,0.17,1
        # left_action_items: [["./images/ngeht_medallion_gold_on_white.png", lambda x: app.null_func ]]
        left_action_items: [["./images/ngeht_medallion_white_on_white_small.png", lambda x: app.null_func ]]
        right_action_items: [["menu", lambda x: root.callback(x)]]
    BoxLayout:
        size_hint: 1,None
        height: dp(0.5)
        canvas:
            Color:
                rgba: 1,1,1,1
            Line:
                points: [(0,self.pos[1]+0.5*self.height),(self.width,self.pos[1]+0.5*self.height)]
                width: self.height
    

<InteractiveReconstructionPlot>:
    orientation: "vertical"
    ddm_id: ddm
    otm_id: otm
    menu_id: sme
    plot_id: plot
    FloatLayout:
        canvas:
            Color:
                rgb: 0,0,0
            Rectangle:
                size: root.width,root.height
        size_hint: 1.0,1.0
        MenuedReconstructionPlot:
            id: plot
            size: root.width,root.height
    BoxLayout:
        orientation: "vertical"
        size_hint: None,None
        size: dp(50),dp(100)
        pos: root.width-dp(50),root.height-dp(100)
        Button:
            text: "\u002B"
            font_size: "36sp"
            size_hint: None,None
            size: "50dp","50dp"
            color: 1,1,1,0.75
            background_color: 0,0,0,0.25
            on_press: plot.irp.zoom_in()
        Button:
            text: "\u2212"
            font_size: "36sp"
            size_hint: None,None
            size: "50dp","50dp"
            color: 1,1,1,0.75
            background_color: 0,0,0,0.25
            on_press: plot.irp.zoom_out()

    DiameterMenu:
        id: ddm
        plot: plot
        size_hint: 1.0,None
        opened_height: dp(100)+otm.height
        height: ( self.opened_height if self.is_open else otm.height )
        closed_height: otm.height
        current_opened_height: self.opened_height
            
    ObsTimeMenu:
        id: otm
        plot: plot
        size_hint: 1.0,None
        opened_height: dp(100)+sme.height
        height: ( self.opened_height if self.is_open else sme.height )
        closed_height: sme.height
        current_opened_height: self.opened_height

    StationMenu:
        id: sme
        rpp: plot
        ddm_id: ddm
        size_hint: 1.0,None
        height: dp(50)+dp(25)
        closed_height: dp(50)+dp(25)
        


<InteractiveBaselinesPlot>:
    orientation: "vertical"
    ddm_id: ddm
    otm_id: otm
    menu_id: sme
    plot_id: plot
    FloatLayout:
        canvas:
            Color:
                rgb: 0,0,0
            Rectangle:
                size: root.width,root.height
        size_hint: 1.0,1.0
        MenuedBaselinePlot:
            id: plot
            size: root.width,root.height
    BoxLayout:
        orientation: "vertical"
        size_hint: None,None
        size: dp(50),dp(100)
        pos: root.width-dp(50),root.height-dp(100)
        Button:
            text: "\u002B"
            font_size: "36sp"
            size_hint: None,None
            size: "50dp","50dp"
            color: 1,1,1,0.75
            background_color: 0,0,0,0.25
            on_press: plot.zoom_in()
        Button:
            text: "\u2212"
            font_size: "36sp"
            size_hint: None,None
            size: "50dp","50dp"
            color: 1,1,1,0.75
            background_color: 0,0,0,0.25
            on_press: plot.zoom_out()

    DiameterMenu:
        id: ddm
        plot: plot
        size_hint: 1.0,None
        opened_height: dp(100)+otm.height
        height: ( self.opened_height if self.is_open else otm.height )
        closed_height: otm.height
        current_opened_height: self.opened_height
            
    ObsTimeMenu:
        id: otm
        plot: plot
        size_hint: 1.0,None
        opened_height: dp(100)+sme.height
        height: ( self.opened_height if self.is_open else sme.height )
        closed_height: sme.height
        current_opened_height: self.opened_height
        
    StationMenu:
        id: sme
        rpp: plot
        ddm_id: ddm
        size_hint: 1.0,None
        height: dp(50)+dp(25)
        closed_height: dp(50)+dp(25)


        
<InteractiveMapsPlot>:
    id: top_plot
    orientation: "vertical"
    ddm_id: ddm
    otm_id: otm
    menu_id: sme
    plot_id: plot
    FloatLayout :
        # canvas:
        #     Color:
        #         rgb: 0,0,0
        #     Rectangle:
        #         size: root.width,root.height
                
        size_hint: 1.0,1.0
        MenuedBaselineMapPlot_kivygraph:
            id: plot
            size: root.width,root.height
            ad_stn_box: ad_stn_box
            menu_id: sme

    BoxLayout:
        orientation: "vertical"
        size_hint: None,None
        size: dp(50),dp(100)
        pos: root.width-dp(50),root.height-dp(100)
        Button:
            text: "\u002B"
            font_size: "36sp"
            size_hint: None,None
            size: "50dp","50dp"
            color: 1,1,1,0.75
            background_color: 0,0,0,0.25
            on_press: plot.zoom_in()
        Button:
            text: "\u2212"
            font_size: "36sp"
            size_hint: None,None
            size: "50dp","50dp"
            color: 1,1,1,0.75
            background_color: 0,0,0,0.25
            on_press: plot.zoom_out()

    BoxLayout:
        id: ad_stn_box
        orientation: "vertical"
        size_hint: None,None
        size: dp(60),dp(120)
        pos: 0,root.height-dp(120)
        # Button:
        #     text: "Add"
        #     font_size: "14sp"
        #     color: 0.77,0.55,0.17,1
        #     background_color: 1,1,1,0.2
        #     on_press: print("Adding a station!")
        # Button:
        #     text: "Sub"
        #     font_size: "14sp"
        #     color: 0.77,0.55,0.17,1
        #     background_color: 1,1,1,0.2
        #     on_press: print("Removing a station!")

            
    DiameterMenu:
        id: ddm
        plot: plot
        size_hint: 1.0,None
        opened_height: dp(100)+otm.height
        height: ( self.opened_height if self.is_open else otm.height )
        closed_height: otm.height
        current_opened_height: self.opened_height
            
    ObsTimeMenu:
        id: otm
        plot: plot
        size_hint: 1.0,None
        opened_height: dp(100)+sme.height
        height: ( self.opened_height if self.is_open else sme.height )
        closed_height: sme.height
        current_opened_height: self.opened_height

    StationMenu:
        id: sme
        # rpp: top_plot
        rpp: plot
        ddm_id: ddm
        size_hint: 1.0,None
        height: dp(50)+dp(25)
        closed_height: dp(50)+dp(25)
        

<DiameterMenu>:
    id: ddm
    ddm_id: dds
    expand_time: 0.5
    fps: 60
    tab_width: 0.333333*self.width
    tab_pos_x: 0.666667*self.width
    closed_height: 0
    
    canvas:
        Color:
            rgba: 0.77,0.55,0.17,0.25
        Rectangle:
            size: root.width, root.height-dp(25)
    orientation: "vertical"
    Button:
        canvas:
            Color:
                rgba: 0.77,0.55,0.17,0.75
            RoundedRectangle:
                # radius: [(20,),(20,),(0,),(0,)]
                radius: [(40,),(40,),(0,),(0,)]
                size: root.tab_width,self.size[1]
                pos: self.pos[0],root.height-dp(25)
            Color:
                rgba: 0.14,0.14,0.14,0.75
            Triangle:
                points: (0.5*root.tab_width+root.tab_pos_x-dp(10),root.height-dp(25)+0.2*self.height+0.6*self.height*root.is_open, 0.5*root.tab_width+root.tab_pos_x+dp(10),root.height-dp(25)+0.2*self.height+0.6*self.height*root.is_open, 0.5*root.tab_width+root.tab_pos_x,root.height-dp(25)+0.8*self.height-0.6*self.height*root.is_open)
        size_hint: None,None
        width: root.tab_width
        height: dp(25)
        pos_hint: {'right':(root.tab_width+root.tab_pos_x)/root.width}
        background_color: 0,0,0,0
        background_normal: ''
        color: 0.14,0.14,0.14,1
        on_press:
            dds.toggle_state()
            
    DiameterSliders:
        id: dds
        plot: root.plot
        top_menu: root
        size_hint: 1,None
        height: root.height-dp(25)-root.closed_height

    BoxLayout:
        size_hint: 1,None
        height: root.closed_height

        
<ObsTimeMenu>:
    id: otm
    ots_id: ots
    expand_time: 0.5
    fps: 60
    tab_width: 0.333333*self.width
    tab_pos_x: 0.333333*self.width
    closed_height: 0
    
    canvas:
        Color:
            rgba: 0.77,0.55,0.17,0.25
        Rectangle:
            size: root.width, root.height-dp(25)
    orientation: "vertical"
    Button:
        canvas:
            Color:
                rgba: 0.77,0.55,0.17,0.75
            RoundedRectangle:
                # radius: [(20,),(20,),(0,),(0,)]
                radius: [(40,),(40,),(0,),(0,)]
                size: root.tab_width,self.size[1]
                pos: self.pos[0],root.height-dp(25)
            Color:
                rgba: 0.14,0.14,0.14,0.75
            Triangle:
                points: (0.5*root.tab_width+root.tab_pos_x-dp(10),root.height-dp(25)+0.2*self.height+0.6*self.height*root.is_open, 0.5*root.tab_width+root.tab_pos_x+dp(10),root.height-dp(25)+0.2*self.height+0.6*self.height*root.is_open, 0.5*root.tab_width+root.tab_pos_x,root.height-dp(25)+0.8*self.height-0.6*self.height*root.is_open)
        size_hint: None,None
        width: root.tab_width
        height: dp(25)
        pos_hint: {'right':(root.tab_width+root.tab_pos_x)/root.width}
        background_color: 0,0,0,0
        background_normal: ''
        color: 0.14,0.14,0.14,1
        on_press:
            ots.toggle_state()
            
    ObsTimeSliders:
        id: ots
        plot: root.plot
        top_menu: root
        size_hint: 1,None
        height: root.height-dp(25)-root.closed_height

    BoxLayout:
        size_hint: 1,None
        height: root.closed_height
            
    
<StationMenu>:
    id: sme
    submenu_id: menu
    expand_time: 0.5
    fps: 60
    opened_height: dp(50)+menu.minimum_height+dp(25)
    # opened_height: dp(50)+menu.minimum_height+dp(50)
    tab_width: 0.333333*self.width
    canvas:
        Color:
            rgba: 0.77,0.55,0.17,0.125
        Rectangle:
            size: root.width, root.height-dp(25)
    orientation: "vertical"
    Button:
        canvas.after:
            Color:
                rgba: 0.77,0.55,0.17,0.75
            RoundedRectangle:
                # radius: [(20,),(20,),(0,),(0,)]
                radius: [(40,),(40,),(0,),(0,)]
                size: root.tab_width,self.size[1]
                pos: self.pos
            Color:
                rgba: 0.14,0.14,0.14,0.75
            Triangle:
                points: (0.5*root.tab_width-dp(10),self.pos[1]+0.2*self.height+0.6*self.height*root.is_open, 0.5*root.tab_width+dp(10),self.pos[1]+0.2*self.height+0.6*self.height*root.is_open, 0.5*root.tab_width,self.pos[1]+0.8*self.height-0.6*self.height*root.is_open)
        size_hint: None,None
        width: root.tab_width
        pos_x: root.tab_pos_x
        height: dp(25)
        pos_y: self.height
        background_color: 0,0,0,0
        background_normal: ''
        color: 0.14,0.14,0.14,1
        on_press:
            root.toggle_state()
            
    BoxLayout:
        id: menu_topbox
        size_hint: 1,None
        height: min(dp(50),root.height)
        Button:
            text: "All"
            font_size: sp(16)
            color: 1,0.75,0.25,1
            background_color: 0,0,0,0
            size_hint: 0.5,None
            size: 1,dp(50)
            on_press:
                menu.turn_all_stations_on()
        SMESpinner:
            sme_id: sme
            ddm_id: sme.ddm_id
            text: sme.array_name
            font_size: sp(18)
            color: 1,1,1,1
            background_color: 0,0,0,0
            size_hint: 1,None
            size: 1,dp(50)
            height: dp(50)
            pos: self.pos[0],menu_topbox.pos[1]+dp(0)
            on_text:
                self.on_selection(self.text)
        Button:
            text: "None"
            font_size: sp(16)
            color: 1,0.75,0.25,1
            background_color: 0,0,0,0
            size_hint: 0.5,None
            size: 1,dp(50)
            on_press:
                menu.turn_all_stations_off()
    ScrollView:
        VariableToggleList:
            id: menu
            size_hint: 1, None
            height: self.minimum_height
            padding: 0.5*(root.width-min(self.nstations,int(root.width/self.button_size[0]))*self.button_size[0]),0
            rpp: root.rpp

    
        
<AboutScreen@BoxLayout>:
    orientation: "vertical"
    TopBanner:
    MDBoxLayout:
        orientation: "vertical"    
        BoxLayout:
            size_hint: 1,1
            orientation: "vertical"
            Label:
                text: "About ngEHT"
                color: 0.14,0.14,0.14,1
                size_hint: 1,None
                height: "18sp"
            Image:
                source: "./images/ngeht_medallion_grey_on_white.png"
                stretch: True
                size_hint: 1,None
                height: "80dp"

        BoxLayout:
            size_hint: 1,None
            height: "36sp"
                
        BoxLayout:
            size_hint: 1,1
            orientation: "vertical"
            padding: 50
            spacing: 20
            Label:
                text: "About ngEHT @home"
                color: 0.14,0.14,0.14,1
                size_hint: 1,None
                height: "18sp"
            Label:
                text: "(c) 2021 Avery E. Broderick"
                color: 0.14,0.14,0.14,1
                size_hint: 1,None
                height: "14sp"
            BoxLayout:
                Image:
                    source: "./logos/perimeter_stacked_black.png"
                    stretch: True 
                    size_hint: 1,1
                Image:
                    source: "./logos/UniversityOfWaterloo_logo_horiz_rgb.png"
                    stretch: True
                    size_hint: 1,1
            Widget:


    MDBoxLayout:
        md_bg_color: 0.14,0.14,0.14,1
        size_hint: 1,None
        height: "30dp"
        MDToolbar:
            type: "bottom"
            remove_notch: True
            
            left_action_items: [["twitter",lambda x: app.twitter_follow()],["facebook",lambda x: app.facebook_follow()],["instagram",lambda x: app.instagram_follow()],["youtube",lambda x: app.youtube_follow()]]
            right_action_items: [["web",lambda x: app.website_link()]]
            
                
<NewsScreen@BoxLayout>:
    orientation: "vertical"
    TopBanner:
    MDBoxLayout:
        orientation: "vertical"    

        Label:
            text: "Latest ngEHT News"
            color: 0.14,0.14,0.14,1
            size_hint: 1,None
            height: "18sp"
            
        BoxLayout:
            size_hint: 1,1
            orientation: "vertical"
            Label:
                text: "Some web-pull of news stream."
                color: 0.14,0.14,0.14,1
                size_hint: 1,None
                height: "18sp"
            
            Image:
                source: "./images/ngeht_medallion_grey_on_white.png"
                stretch: True
                size_hint: 1,None
                height: "80dp"

        Widget:

    MDBoxLayout:
        md_bg_color: 0.14,0.14,0.14,1
        size_hint: 1,None
        height: "30dp"
        MDToolbar:
            type: "bottom"
            remove_notch: True
            
            left_action_items: [["twitter",lambda x: app.twitter_follow()],["facebook",lambda x: app.facebook_follow()],["instagram",lambda x: app.instagram_follow()],["youtube",lambda x: app.youtube_follow()]]
            right_action_items: [["web",lambda x: app.website_link()]]


